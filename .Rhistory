addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
## visualize points
# a vector of ID numbers for these coordinates
ID <- 1:15
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(decimalLongitude), lat1=min(decimalLatitude),
lng2=max(decimalLongitude), lat2=max(decimalLatitude))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(decimalLongitude), lat1=min(decimalLatitude),
lng2=max(decimalLongitude), lat2=max(decimalLatitude))
View(coordinates)
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(decimalLongitude), lat1=min(decimalLatitude),
lng2=max(decimalLongitude), lat2=max(decimalLatitude))
View(coordinates)
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(data$decimalLongitude), lat1=min(data$decimalLatitude),
lng2=max(data$decimalLongitude), lat2=max(data$decimalLatitude))
View(coords)
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~long, ~lat, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(data$decimalLongitude), lat1=min(data$decimalLatitude),
lng2=max(data$decimalLongitude), lat2=max(data$decimalLatitude))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(decimalLongitude), lat1=min(decimalLatitude),
lng2=max(decimalLongitude), lat2=max(decimalLatitude))
rm(lat)
rm(long)
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(decimalLongitude), lat1=min(decimalLatitude),
lng2=max(decimalLongitude), lat2=max(decimalLatitude))
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
plot(alt, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))
#reduce layers to two variables
r <- r[[c(1, 12)]]
# we can name these two layers
names(r) <- c("Tmean", "Prec")
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coords, proj4string = r@crs)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# getting temp and precip for the points
clim <- extract(r, points)
# getting the 30s altitude for the points
altS <- extract(alt, points)
# bind it all into one dataframe
climate <- cbind.data.frame(coords, altS, clim)
# bind it all into one dataframe
climate <- cbind.data.frame(coordinates, altS, clim)
# what does this look like?
print(climate)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# getting temp and precip for the points
clim <- extract(r, points)
# getting the 30s altitude for the points
altS <- extract(alt, points)
# bind it all into one dataframe
climate <- cbind.data.frame(coordinates, altS, clim)
# what does this look like?
print(climate)
View(points)
View(clim)
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
alt <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
View(r)
unlist(r)
#reduce layers to two variables
r <- r[[c(1, 12)]]
unlist(r)
# getting temp and precip for the points
clim <- extract(r, points)
View(coordinates)
View(points)
coordinates %>% select(decimalLongitude, decimalLatitude)
coordinates %>% arrange(decimalLongitude, decimalLatitude)
coordinates <- coordinates[c(2,1)]
View(coordinates)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# getting temp and precip for the points
clim <- extract(r, points)
# getting the 30s altitude for the points
altS <- extract(alt, points)
# getting the 30s altitude for the points
altS <- extract(alt, points)
# bind it all into one dataframe
climate <- cbind.data.frame(coordinates, altS, clim)
# what does this look like?
print(climate)
climate <- mutate(climate, MAT=Tmean/10) %>%
select(-Tmean)
print(climate)
# we can name these two layers
names(r) <- c("Tmean", "Prec")
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# getting temp and precip for the points
clim <- extract(r, points)
# getting the 30s altitude for the points
altS <- extract(alt, points)
# bind it all into one dataframe
climate <- cbind.data.frame(coordinates, altS, clim)
# what does this look like?
print(climate)
climate <- mutate(climate, MAT=Tmean/10) %>%
select(-Tmean)
climate <- mutate(climate, MAT=Tmean/10) %>%
select(-Tmean)
climate <- mutate(climate, MAT=Tmean/10)
print(climate)
climate %>%
arrange(altS) %>% View()
coord2 <- data %>%
distinct(decimalLatitude, decimalLongitude)
coord2 <- coordinates[c(2,1)]
View(coord2)
coord2 <- data %>%
distinct(decimalLatitude, decimalLongitude)
coord2 <- coord2[c(2,1)]
ID2 <- 1:957
# the steps to extract values for the variables you want from the coordinates:
points2 <- SpatialPoints(coord2, proj4string = r@crs)
View(coord2)
leaflet(data = coor2) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
leaflet(data = coord2) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
View(coord2)
View(coord2)
coord2 <- data %>%
distinct(decimalLatitude, decimalLongitude, Elevation)
View(coord2)
coord2 %>% arrange(Elevation) %>% View()
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
View(data)
View(lacocha)
View(coordinates)
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
plot(alt, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for site
plot(alt) #plots tile with data downloaded from worldclim
print(climate)
climate %>%
arrange(altS) %>% View()
View(coord2)
leaflet(data = coord2) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
View(data)
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) %>% View()
sumapaz <- data %>% filter(ParamoComplex == "Complejo de Paramos Sumapaz-Cruz Verde (SCV)")
sumapaz %>%
group_by(Elevation) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude))
sumapaz %>%
group_by(Elevation) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) %>% View()
climate %>%
arrange(altS) %>% View()
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) %>% View()
#instalar paquetes sino se tienen usando install.packages("nombre del paquete")
#cargar paquetes
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
library(raster)
library(sp)
library(leaflet)
library(maps)
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
library(raster)
library(sp)
library(leaflet)
library(maps)
# importar base de datos
data <- read_tsv("documentos/Montoya_etal_2018_database.txt")
# importar base de datos
data <- read_tsv("datos/Montoya_etal_2018_database.txt")
# revisar estructura
str(data)  #9892 obs of 38 variables
# revisar estructura
str(data)  #9892 obs of 38 variables
dim(data)
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) %>% View()
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude))
View(data)
data %>%
length(Source == "Field")
View(data)
data %>%
filter(Source == "Field")
data %>%
group_by(Source)
data %>%
group_by(Source) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude))
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude))
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# crear subconjunto de datos para complejo La Cocha
lacocha <- data %>% filter(ParamoComplex == "Complejo de Paramos La Cocha-Patascoy (LCP)")
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) %>% View()
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
lacocha %>%
group_by(Elevation) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species),
gps = n_distinct(decimalLatitude)) #13 elevations from 2810 to 3504
# revisar informacion para este complejo
lacocha %>%
group_by(Locality, Elevation) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
lacocha %>%
distinct(Locality, Elevation)
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLatitude, decimalLongitude)
View(coordinates)
coordinates <- coordinates[c(2,1)] #arrange order of columns
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLatitude, decimalLongitude)
View(coordinates)
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude)
View(coordinates)
clima <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
elevacion <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
# visualizar estos puntos de GPS de la cocha
ID <- 1:15
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
plot(alt) #plots tile with data downloaded from worldclim
plot(elevacion) #plots tile with data downloaded from worldclim
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
long <- coordinates$decimalLongitude
leaflet(data=coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID)) %>%
addRectangles(
lng1=min(long), lat1=min(lat),
lng2=max(long), lat2=max(lat))
# visualizar estos puntos de GPS de la cocha
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
plot(alt, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for site
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for site
clim <- extract(clima, points)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = clima@crs)
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
# the steps to extract values for the variables you want from the coordinates:
points <- SpatialPoints(coordinates, proj4string = r@crs)
# getting temp and precip for the points
clim <- extract(r, points)
View(clim)
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# hay 19 variables en wordlclim pero vamos a extraer solo la numero 1 y 12 que son Temp media anual y precipitacion anual
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas
climate <- cbind.data.frame(coordinates, clim)
# what does this look like?
print(climate)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
View(coordinates)
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS de la cocha
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for specific coordinates
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# hay 19 variables en wordlclim pero vamos a extraer solo la numero 1 y 12 que son Temp media anual y precipitacion anual
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
library(raster)
library(sp)
library(leaflet)
library(maps)
# importar base de datos
data <- read_tsv("datos/Montoya_etal_2018_database.txt")
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# crear subconjunto de datos para complejo La Cocha
lacocha <- data %>% filter(ParamoComplex == "Complejo de Paramos La Cocha-Patascoy (LCP)")
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
View(coordinates)
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS de la cocha
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
elevacion <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
climate %>% View()
climate %>% arrange(Elevation) %>% View()
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species)) %>% View()
View(climate)
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species)) %>% View()
# revisar informacion para este complejo
lacocha %>%
group_by(Locality, Elevation) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species)) %>% View()
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species)) %>% View()
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
View(data)
