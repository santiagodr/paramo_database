# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
# crear vectores con las coordenadas para visualizacion
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS de la cocha
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
elevacion <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for specific coordinates
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# hay 19 variables en wordlclim pero vamos a extraer solo la numero 1 y 12 que son Temp media anual y precipitacion anual
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
View(data)
View(data)
field$Source
data$Source
data$levels(Source)
data %>% levels(Source)
levels(data$Source)
str(data$Source)
data %>% distinct(Source)
#subset field data
field <- data %>% filter(Source = "Field")
#subset field data
field <- data %>% filter(Source == "Field")
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
View(coordinates)
View(field)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex)
View(coordinates)
# crear vectores con las coordenadas para visualizacion
ID <- 1:480 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for specific coordinates
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1,3], proj4string = r@crs)
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
View(points)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
climate %>% arrange(Elevation) %>% View()
climate %>% arrange(Elevation) %>% View()
climate.ord <- ordinate(climate, "NMDS", "bray")
climate.ord <- ordinate(climate, "NMDS", "bray")
View(climate)
ggplot(climate, aes(MAT, Prec)) +
geom_point()
ggplot(climate, aes(MAT, Prec)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point() +
theme_classic()
ggplot(climate, aes(MAT, Prec)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(Elevation))) +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(log(MAT), log(Prec))) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(Elevation, MAT)) +
geom_point() +
theme_bw()
ggplot(climate, aes(Elevation, Prec)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
geom_smooth(method = "lm", se = FALSE)
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
geom_smooth(method = "lm", se = FALSE) +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="blue", high="red") +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
library(raster)
library(sp)
library(leaflet)
library(maps)
# importar base de datos
data <- read_tsv("datos/Montoya_etal_2018_database.txt")
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# crear subconjunto de datos para complejo La Cocha
lacocha <- data %>% filter(ParamoComplex == "Complejo de Paramos La Cocha-Patascoy (LCP)")
View(lacocha)
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
View(coordinates)
# crear vectores con las coordenadas para visualizacion
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
elevacion <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for specific coordinates
# hay 19 variables en wordlclim pero vamos a extraer solo la numero 1 y 12 que son Temp media anual y precipitacion anual
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
View(r)
View(coordinates)
View(r)
View(points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
climate %>% arrange(Elevation) %>% View()
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
climate %>% arrange(Elevation) %>% View()
#subset field data
field <- data %>% filter(Source == "Field")
View(field)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex)
View(coordinates)
# crear vectores con las coordenadas para visualizacion
ID <- 1:480 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
View(coordinates)
climate <- mutate(climate, MAT=Tmean/10)
climate %>% arrange(Elevation) %>% View()
View(climate)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex)
View(coordinates)
# crear vectores con las coordenadas para visualizacion
ID <- 1:480 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
View(climate)
View(climate)
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(log(MAT), log(Prec))) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(Elevation, MAT)) +
geom_point() +
theme_bw()
ggplot(climate, aes(Elevation, Prec)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
geom_smooth(method = "lm", se = FALSE) +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex), size = 4)) +
theme_bw()
View(climate)
View(field)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department)
#department
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(Department), size = 4)) +
theme_bw()
#department
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(Department), size = 4)) +
theme_bw()
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
#department
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(Department), size = 4)) +
theme_bw()
View(coordinates)
climate <- cbind.data.frame(coordinates, clim)
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department)
# crear vectores con las coordenadas para visualizacion
ID <- 1:480 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
climate %>% arrange(Elevation) %>% View()
#department
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(Department), size = 4)) +
theme_bw()
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
climate %>% arrange(Elevation) %>% View()
ggplot(climate, aes(MAT, Prec)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec), color = Elevation) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec), color = Elevation) +
geom_point() +
theme_bw()
View(climate)
ggplot(climate, aes(MAT, Prec,  color = Elevation)) +
geom_point() +
theme_bw()
ggplot(climate, aes(MAT, Prec,  color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point() +
theme_bw()
View(climate)
View(field)
## subset of data for complejo La Cocha
lacocha <- data %>% filter(ParamoComplex == "Complejo de Paramos La Cocha-Patascoy (LCP)")
lacocha %>%
distinct(Locality, Elevation)
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation, Locality)
View(coordinates)
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point() +
theme_bw()
# extraer puntos gps para este subset
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department)
# crear vectores con las coordenadas para visualizacion
ID <- 1:480 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex), size = 4)) +
theme_bw()
ggplot(climate, aes(log(MAT), log(Prec))) +
geom_point(aes(color = factor(ParamoComplex))) +
theme_bw()
ggplot(climate, aes(MAT, Prec, color = Elevation)) +
scale_color_gradient(low="green", high="red") +
geom_point(size = 4) +
theme_bw()
View(climate)
# importar base de datos
data <- read_tsv("datos/Montoya_etal_2018_database.txt")
# revisar estructura
str(data)
dim(data) #9892 obs of 38 variables
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# extraer solo datos con informacion de campo
field <- data %>% filter(Source == "Field")
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
#instalar paquetes sino se tienen usando install.packages("nombre del paquete")
#cargar paquetes
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
library(raster)
library(sp)
library(leaflet)
library(maps)
# importar base de datos
data <- read_tsv("datos/Montoya_etal_2018_database.txt")
# revisar estructura
str(data)
dim(data) #9892 obs of 38 variables
# revisar que datos tienen informacion especifica de campo
data %>%
group_by(ParamoComplex) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# crear subconjunto de datos para complejo La Cocha
lacocha <- data %>% filter(ParamoComplex == "Complejo de Paramos La Cocha-Patascoy (LCP)")
# revisar informacion para este complejo
lacocha %>%
group_by(Locality) %>%
summarise(number_records = n(),
number_sp = n_distinct(Species))
# extraer puntos gps para la cocha
coordinates <- lacocha %>%
distinct(decimalLongitude, decimalLatitude, Elevation)
# crear vectores con las coordenadas para visualizacion
ID <- 1:15 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS de la cocha
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
r <- getData("worldclim", var = "bio", res = 0.5, lon = -77, lat = 1)
elevacion <- getData("worldclim", var="alt", res=0.5, lon=-77, lat=1)
# visualizar perfil de elevacion
plot(elevacion) # plots tile with data downloaded from worldclim
plot(elevacion, xlab="Longitude", ylab="Latitude",
ylim=c(min(lat), max(lat)),
xlim=c(min(long), max(long)))  #plot elevation profile for specific coordinates
# crear puntos espaciales para las coordenadas
points <- SpatialPoints(coordinates, proj4string = r@crs)
# hay 19 variables en wordlclim pero vamos a extraer solo la numero 1 y 12 que son Temp media anual y precipitacion anual
r <- r[[c(1, 12)]]
names(r) <- c("Tmean", "Prec")
# extraer estas dos variables para los puntos
clim <- extract(r, points)
# unir coordenadas y variables climaticas y transformar temperatura media que en worldclim esta multiplicada x10
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
# subconjunto final
print(climate)
# extraer solo subset de datos con informacion de campo y exportarlo como csv
field <- data %>% filter(Source == "Field")
write.csv(field, file = "sub_datos/paramo_field.csv")
# extraer puntos unicos de gps para este subset de datos
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department)
View(field)
# extraer puntos unicos de gps para este subset de datos
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department, Locality)
# extraer puntos unicos de gps para este subset de datos
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department)
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude)
# extraer puntos unicos de gps para este subset de datos
coordinates <- field %>%
distinct(decimalLongitude, decimalLatitude, Elevation, ParamoComplex, Department, Locality)
# crear vectores con las coordenadas para visualizacion
ID <- 1:483 # vector del numero de puntos
long <- coordinates$decimalLongitude
lat <- coordinates$decimalLatitude
# visualizar estos puntos de GPS para confirmar que estan dentro de COL
leaflet(data = coordinates) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude, label=as.character(ID))
# crear informacion espacial para las 483 coordenadas combinadas
points <- SpatialPoints(coordinates[1:3], proj4string = r@crs)
# extraer estas dos variables para los puntos
clim <- extract(r, points)
climate <- cbind.data.frame(coordinates, clim)
climate <- mutate(climate, MAT=Tmean/10)
View(climate)
climate <- cbind.data.frame(coordinates, clim)
# subconjunto final
climate %>% arrange(Elevation) %>% View()
climate <- mutate(climate, Tmean=Tmean/10)
# subconjunto final
climate %>% arrange(Elevation) %>% View()
write.csv(climate, file = "sub_datos/coordinates.csv")
#####
# Graficas exploratorias entre variables
ggplot(climate, aes(MAT, Prec)) +
geom_point(aes(color = factor(ParamoComplex), size = 4)) +
theme_bw()
#####
# Graficas exploratorias entre variables
ggplot(climate, aes(Tmean, Prec)) +
geom_point(aes(color = factor(ParamoComplex), size = 4)) +
theme_bw()
#cargar paquetes
suppressPackageStartupMessages(library(tidyverse))
#cargar paquetes
suppressPackageStartupMessages(library(tidyverse))
#importar subset de datos
subset <- read_csv("sub_datos/coordinates.csv")
ggplot(climate, aes(Elevation, MAT)) +
geom_point() +
theme_bw()
# cambio en temperatura con elevacion
ggplot(subset, aes(Elevation, MAT)) +
geom_point() +
theme_bw()
# cambio en temperatura con elevacion
ggplot(subset, aes(Elevation, Tmean)) +
geom_point() +
theme_bw()
# pero precipitacion no
ggplot(subset, aes(Elevation, precip)) +
geom_point() +
theme_bw()
#instalar paquetes sino se tienen usando install.packages("nombre del paquete")
#cargar paquetes
suppressPackageStartupMessages(library(tidyverse))
